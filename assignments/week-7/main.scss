@import 'variables';
@import 'mixins';

//variables to setup basic size and shape of the card and pips
$card-width: 40vw;
$card-height: $card-width * 1.4;
$font-size-number: $card-width * 0.1;
$icon-size: $card-width / 5;

*,
*:before,
*:after {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
}

//styles to draw a basic outline of a card
.card {
    border: 1px solid grey;
    height: $card-height;
    width: $card-width;
    border-radius: 10px;
    margin: 20px;
    box-shadow: 2px 2px 4px grey;
    // display: grid;
}

//because it is a card front we want a bit of extra padding
.card-front {
    padding: 0.5em;
}

.row {
    display: grid;
    width: 100%;
    grid-template: repeat($num-rows, 1fr) / repeat($num-columns, 1fr);
    grid-template-areas:
        'numcell-1 cell-1 . . . . cell-2 .'
        '. . . cell-3 cell-3 . . .'
        '. cell-4 . . . . cell-5 .'
        '. cell-6 . . . . cell-7 numcell-2';
    // align-items: center;
    // align-content: space-between;
    height: 100%;
    // flex-direction: row;
    // flex-wrap: wrap;
}

.numcell-1 {
    grid-area: numcell-1;
}

.numcell-2 {
    grid-area: numcell-2;
}

.cell {
    // flex: 1;
    // text-align: center;
    width: 100%;
}
.cell-1 {
    grid-area: cell-1;
}
.cell-2 {
    grid-area: cell-2;
}
.cell-3 {
    grid-area: cell-3;
}
.cell-4 {
    grid-area: cell-4;
}
.cell-5 {
    grid-area: cell-5;
}
.cell-6 {
    grid-area: cell-6;
}
.cell-7 {
    grid-area: cell-7;
}
// .span2 {
//     grid-column: span 2;
// }
// .span8 {
//     grid-column: span 8;
//     // align-items: center;
// }
//set icon size
.icon {
    width: $icon-size;
    height: $icon-size;
    justify-self: center;
}

.number {
    text-align: center;
    font-size: $font-size-number;
    //an icon that is part of a number should be half the normal size
    & > .icon {
        width: $icon-size * 0.5;
        height: $icon-size * 0.5;
    }
}

//rotate bottom pips 180deg
.rotate {
    transform: rotate(180deg);
}

@supports not (display: grid) {
    // All of your flexbox SCSS code here.
    .row {
        display: flex;
        flex-flow: row wrap;
        align-items: center;
        align-content: space-between;
        height: 100%;
    }
    .cell {
        flex: 1;
        text-align: center;
    }
}

// //make column classes
@for $index from $loop-start to $loop-end {
    .col-#{$index} {
        @include col($index);
    }
}

//make offset classes
@for $index from $loop-start to $loop-end {
    .offset-#{$index} {
        @include offset($index);
    }
}
